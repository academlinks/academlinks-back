const config = require("../config");
const fs = require("fs");
const { promisify } = require("util");

class Utils {
  constructor() {
    this.unlink = promisify(fs.unlink);
    this.CONSTANT_ASSETS = config.CONSTANT_ASSETS;
    this.CLIENT_STATIC_URL_ROOT = config.CLIENT_STATIC_URL_ROOT;
    this.CLIENT_UPLOAD_DESTINATION = config.CLIENT_UPLOAD_DESTINATION;
    this.COMMERCIAL_STATIC_URL_ROOT = config.COMMERCIAL_STATIC_URL_ROOT;
    this.COMMERCIAL_UPLOAD_DESTINATION = config.COMMERCIAL_UPLOAD_DESTINATION;
  }

  calcSkip({ page, limit }) {
    return page * limit - limit;
  }

  /**
   * @param location - [string] "uploads"|"commercials" -> default is "uploads"
   * @param fileName - [string] string generated by Upload and saved in req as req.xOriginal
   * @returns Promise<void>
   */
  generateFileName({ location = "uploads", fileName }) {
    const locations = {
      uploads: `${this.CLIENT_STATIC_URL_ROOT}${fileName}`,
      commercials: `${this.COMMERCIAL_STATIC_URL_ROOT}${fileName}`,
    };

    return locations[location];
  }

  /**
   * @param location - [string] "uploads"|"commercials" -> default is "uploads"
   * @param media - [string] media file url, as it is saved on DB
   * @returns Promise<void>
   */
  async unlinkFile({ location = "uploads", media }) {
    try {
      const IS_CONSTANT = this.CONSTANT_ASSETS.some((asset) =>
        media.includes(asset)
      );

      if (IS_CONSTANT) return;

      const paths = {
        uploads: {
          static: this.CLIENT_STATIC_URL_ROOT,
          relative: this.CLIENT_UPLOAD_DESTINATION,
        },
        commercials: {
          static: this.COMMERCIAL_STATIC_URL_ROOT,
          relative: this.COMMERCIAL_UPLOAD_DESTINATION,
        },
      };

      const originalFileName = media.replace(paths[location].static, "");
      const path = `${paths[location].relative}${originalFileName}`;

      if (!fs.existsSync(path)) return;

      await this.unlink(path);
    } catch (error) {
      throw error;
    }
  }
}

module.exports = Utils;
